using AutoMapper;
using Microsoft.AspNetCore.Identity;
using PokemonGameAPI.Contracts.DTOs.Auth;
using PokemonGameAPI.Contracts.DTOs.Badge;
using PokemonGameAPI.Contracts.DTOs.Battle;
using PokemonGameAPI.Contracts.DTOs.Gym;
using PokemonGameAPI.Contracts.DTOs.Pokemon;
using PokemonGameAPI.Contracts.DTOs.PokemonAbility;
using PokemonGameAPI.Contracts.DTOs.PokemonCategory;
using PokemonGameAPI.Contracts.DTOs.PokemonStats;
using PokemonGameAPI.Contracts.DTOs.Role;
using PokemonGameAPI.Contracts.DTOs.Tournament;
using PokemonGameAPI.Contracts.DTOs.Trainer;
using PokemonGameAPI.Contracts.DTOs.TrainerPokemon;
using PokemonGameAPI.Contracts.DTOs.TrainerPokemonStats;
using PokemonGameAPI.Contracts.DTOs.User;
using PokemonGameAPI.Domain.Entities;
using PokemonGameAPI.Domain.Enum;

namespace PokemonGameAPI.Application.Profiles
{
    public class MapperProfile : Profile
    {
        public MapperProfile()
        {
            // Auth
            CreateMap<AppUser, RegisterDto>()
                .ForMember(dest => dest.Password, opt => opt.Ignore()) // Password handled in service
                .ReverseMap();

            // Badge
            CreateMap<Badge, BadgeResponseDto>()
                .ForMember(dest => dest.GymName, opt => opt.MapFrom(src => src.Gym.Name));
            CreateMap<BadgeRequestDto, Badge>().ReverseMap();

            // Battle
            CreateMap<Battle, BattleResponseDto>()
         .ForMember(dest => dest.Trainer1Name, opt => opt.MapFrom(src => src.Trainer1.Name))
         .ForMember(dest => dest.Trainer2Name, opt => opt.MapFrom(src => src.Trainer2.Name))

         // Map the single BattlePokemons collection and then split/filter them inside the DTO if needed
         .ForMember(dest => dest.Trainer1BattlePokemons, opt => opt.MapFrom(src => src.BattlePokemons.Where(bp => bp.Side == TrainerSide.Trainer1)))
         .ForMember(dest => dest.Trainer2BattlePokemons, opt => opt.MapFrom(src => src.BattlePokemons.Where(bp => bp.Side == TrainerSide.Trainer2)));

            CreateMap<BattleRequestDto, Battle>()
                .ForMember(dest => dest.BattlePokemons, opt => opt.Ignore());


            // Gym
            CreateMap<Gym, GymResponseDto>();
            CreateMap<GymRequestDto, Gym>().ReverseMap();

            // Pokemon
            CreateMap<Pokemon, PokemonResponseDto>()
            .ForMember(dest => dest.PokemonCategoryName, opt => opt.MapFrom(src => src.Category.Name))
            .ForMember(dest => dest.Abilities, opt => opt.MapFrom(src => src.Abilities))
            .ForMember(dest => dest.BaseStats, opt => opt.MapFrom(src => src.BaseStats))
            .ForMember(dest => dest.TrainerPokemons, opt => opt.MapFrom(src => src.TrainerPokemons));

            CreateMap<PokemonRequestDto, Pokemon>().ReverseMap();

            // Pokemon Category
            CreateMap<PokemonCategory, PokemonCategoryResponseDto>();
            CreateMap<PokemonCategoryRequestDto, PokemonCategory>().ReverseMap();

            // Pokemon Ability
            CreateMap<PokemonAbility, PokemonAbilityResponseDto>();
            CreateMap<PokemonAbilityRequestDto, PokemonAbility>().ReverseMap();

            // Pokemon Stats
            CreateMap<PokemonStats, PokemonStatsRequestDto>().ReverseMap();
            CreateMap<PokemonStats, PokemonStatsResponseDto>()
                .ForMember(dest => dest.PokemonName, opt => opt.MapFrom(src => src.Pokemon.Name));

            CreateMap<PokemonStats, TrainerPokemonStats>()
                .ForMember(dest => dest.Id, opt => opt.Ignore())
                .ForMember(dest => dest.TrainerPokemonId, opt => opt.Ignore())
                .ReverseMap();


            // Role
            CreateMap<IdentityRole, RoleListItemDto>();
            CreateMap<IdentityRole, RoleReturnDto>();
            CreateMap<RoleCreateDto, IdentityRole>()
                .ForMember(dest => dest.Id, opt => opt.Ignore()) // Id is generated by the database
                .ReverseMap();

            // Tournament
            CreateMap<Tournament, TournamentResponseDto>()
                .ForMember(dest => dest.WinnerName, opt => opt.MapFrom(src => src.Winner != null ? src.Winner.Name : string.Empty));
            CreateMap<TournamentRequestDto, Tournament>().ReverseMap();

            // Trainer
            CreateMap<Trainer, TrainerResponseDto>()
                .ForMember(dest => dest.TrainerPokemons, opt => opt.MapFrom(src => src.TrainerPokemons))
                //.ForMember(dest => dest.Badges, opt => opt.MapFrom(src => src.TrainerBadges))
                .ForMember(dest => dest.AppUserName, opt => opt.MapFrom(src => src.AppUser.Name))
                .ForMember(dest => dest.CreatedAt, opt => opt.MapFrom(src => src.CreatedAt))
                .ForMember(dest => dest.UpdatedAt, opt => opt.MapFrom(src => src.UpdatedAt))
                .ForMember(dest => dest.Name, opt => opt.MapFrom(src => src.AppUser.UserName));

            CreateMap<TrainerRequestDto, Trainer>().ReverseMap();

            // Trainer Pokemon
            CreateMap<TrainerPokemon, TrainerPokemonResponseDto>()
                .ForMember(dest => dest.TrainerName, opt => opt.MapFrom(src => src.Trainer.Name))
                .ForMember(dest => dest.PokemonName, opt => opt.MapFrom(src => src.Pokemon.Name))
                .ForMember(dest => dest.TrainerPokemonStats, opt => opt.MapFrom(src => src.TrainerPokemonStats));

            CreateMap<TrainerPokemonRequestDto, TrainerPokemon>().ReverseMap();

            // Trainer Pokemon Stats
            CreateMap<TrainerPokemonStats, TrainerPokemonStatsResponseDto>();
            CreateMap<TrainerPokemonStatsRequestDto, TrainerPokemonStats>()
                .ForMember(dest => dest.TrainerPokemonId, opt => opt.Ignore()) // handled in service
                .ReverseMap();

            // AppUser
            CreateMap<AppUser, UserReturnDto>();
            CreateMap<AppUser, UserListItemDto>();
            CreateMap<UserUpdateDto, AppUser>().ReverseMap();

            // TrinerPokemonStats to PokemonStats mapping
            CreateMap<PokemonStatsResponseDto, TrainerPokemonStatsResponseDto>();
            CreateMap<PokemonStatsRequestDto, TrainerPokemonStatsRequestDto>()
                .ForMember(dest => dest.TrainerPokemonId, opt => opt.Ignore()) // handled in service
                .ReverseMap();

            // PokemonStats to TrainerPokemonStats mapping

        }
    }
}
